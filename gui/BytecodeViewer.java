/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BytecodeViewer.java
 *
 * Created on Aug 25, 2010, 2:20:59 PM
 */

package gui;

import java.awt.dnd.*;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.*;
import javax.swing.plaf.basic.BasicTreeUI.TreeSelectionHandler;
import javax.swing.tree.*;
import javax.swing.tree.*;
import mcparser.*;
import mcparser.instr.*;
import mcparser.util.*;
import org.apache.bcel.Repository;
import org.apache.bcel.classfile.*;
import org.apache.bcel.generic.*;

/**
 *
 * @author Micah
 */
public class BytecodeViewer extends javax.swing.JFrame {

    // Form variables
    JFileChooser fileChooser = new JFileChooser();
    JarProcessor jarProcessor = null;
    HashMap<TreePath,ArrayList<Integer>> nodeHashMap =
            new HashMap<TreePath,ArrayList<Integer>>();
    HashMap<TreePath,String> nodeMethodSigMap =
            new HashMap<TreePath,String>();
    HashMap<ArrayList<Integer>,String> parserDataMap =
            new HashMap<ArrayList<Integer>,String>();
    ArrayList<String> recursiveMethodList = new ArrayList<String>();
    ArrayList<String> syncMethodList = new ArrayList<String>();
    File jarFile = null;
    File parserDataFile = null;

    // File filters
    FileFilter jarFileFilter = new FileFilter()
    {
        public boolean accept(File f)
        {
            if (f.isDirectory())
                return true;
            if (f.getName().endsWith(".jar"))
                return true;
            return false;
        }
        public String getDescription() { return "JAR Files (*.jar)"; }
    };
    FileFilter textFileFilter = new FileFilter()
    {
        public boolean accept(File f)
        {
            if (f.isDirectory())
                return true;
            if (f.getName().endsWith(".txt"))
                return true;
            return false;
        }
        public String getDescription() { return "Output Files (*.txt)"; }
    };

    /** Creates new form BytecodeViewer */
    public BytecodeViewer(String jarFilename, String parserOutFilename) {
        initComponents();

        // Set basic information
        this.setTitle("Bytecode Viewer");
        if (!jarFilename.isEmpty())
        {
            jarFile = new File(jarFilename);
            loadBytecode();
        }
        if (!parserOutFilename.isEmpty())
        {
            parserDataFile = new File(parserOutFilename);
            loadParserData();
        }
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));

        // Add the tree selection listener (since apparently design mode doesn't support it...)
        bytecodeTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent evt) {
                bytecodeTreeSelectionChanged(evt);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        universeTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        bytecodeTree = new javax.swing.JTree();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openJarMenuItem = new javax.swing.JMenuItem();
        openVerifierOutputMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        universeTextArea.setColumns(20);
        universeTextArea.setEditable(false);
        universeTextArea.setRows(5);
        jScrollPane1.setViewportView(universeTextArea);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JavaProgram");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Static Constructors");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Main");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Recursive Methods");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Special Methods (Callbacks, etc.)");
        treeNode1.add(treeNode2);
        bytecodeTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        bytecodeTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                bytecodeTreeTreeWillExpand(evt);
            }
        });
        bytecodeTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
                bytecodeTreeTreeCollapsed(evt);
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
            }
        });
        jScrollPane2.setViewportView(bytecodeTree);

        fileMenu.setText("File");

        openJarMenuItem.setText("Open JAR");
        openJarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openJarMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openJarMenuItem);

        openVerifierOutputMenuItem.setText("Open Verifier Output");
        openVerifierOutputMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openVerifierOutputMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openVerifierOutputMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openJarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openJarMenuItemActionPerformed
        // Default to viewing "*.jar" files
        fileChooser.resetChoosableFileFilters();
        fileChooser.addChoosableFileFilter(jarFileFilter);
        // Show the open file dialog and check what was returned
        fileChooser.setLocation(this.getLocation());
        int returnVal = fileChooser.showOpenDialog(this);
        // If it's an OK, process the file and update accordingly
        if (returnVal == fileChooser.APPROVE_OPTION)
        {
            jarFile = fileChooser.getSelectedFile();
            loadBytecode();
        }
    }//GEN-LAST:event_openJarMenuItemActionPerformed

    private void bytecodeTreeTreeCollapsed(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_bytecodeTreeTreeCollapsed
        // Remove all data associated with this
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)evt.getPath().getLastPathComponent();
        node.removeAllChildren();
        node.add(new DefaultMutableTreeNode("1"));

        // TODO: Remove node data from mappings
        
        bytecodeTree.repaint();
        System.gc();
    }//GEN-LAST:event_bytecodeTreeTreeCollapsed

    private void bytecodeTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_bytecodeTreeTreeWillExpand
        try
        {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode)evt.getPath().getLastPathComponent();
            if (node.getLevel()>=2)
            {
                createCodeNodes(node);
            }
            bytecodeTree.repaint();
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "ERROR: " + ex.toString());
        }
    }//GEN-LAST:event_bytecodeTreeTreeWillExpand

    private void openVerifierOutputMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openVerifierOutputMenuItemActionPerformed
        // Default to viewing "*.txt" files
        fileChooser.resetChoosableFileFilters();
        fileChooser.addChoosableFileFilter(textFileFilter);
        // Show the open file dialog and check what was returned
        fileChooser.setLocation(this.getLocation());
        int returnVal = fileChooser.showOpenDialog(this);
        // If it's an OK, process the file and update accordingly
        if (returnVal == fileChooser.APPROVE_OPTION)
        {
            parserDataFile = fileChooser.getSelectedFile();
            loadParserData();
        }
    }//GEN-LAST:event_openVerifierOutputMenuItemActionPerformed

    private void bytecodeTreeSelectionChanged(TreeSelectionEvent evt) {
        ArrayList<Integer> hashList = nodeHashMap.get(evt.getPath());
        System.out.println(hashList);
        if (parserDataMap.containsKey(hashList))
            universeTextArea.setText(parserDataMap.get(hashList));
        else
            universeTextArea.setText("");
        universeTextArea.repaint();
    }

    private void createCodeNodes(DefaultMutableTreeNode node)
            throws ClassNotFoundException, BadInstructionHandleException
    {
        String methodSignature = nodeMethodSigMap.get(new TreePath(node.getPath()));
        JavaClass jclass = Repository.lookupClass(methodSignature.substring(0,methodSignature.lastIndexOf('.')));
        ClassGen cgen = new ClassGen(jclass);
        ConstantPoolGen cpgen = cgen.getConstantPool();
        MethodGen mgen = Misc.getMethodGen(jclass, methodSignature.substring(methodSignature.lastIndexOf('.')+1));

        // Abort if no instructions
        if (mgen.getInstructionList() == null)
            return;

        node.removeAllChildren();
        Iterator<InstructionHandle> codeIter = mgen.getInstructionList().iterator();
        while (codeIter.hasNext())
        {
            InstructionHandle ih = codeIter.next();
            String codeNodeLabel =
                    ih.getPosition() + ": " + ih.getInstruction().toString(cpgen.getConstantPool());
            if (ih.getInstruction() instanceof BranchInstruction)
                codeNodeLabel = "<html><font color=\"green\">"+codeNodeLabel+"</font></html>";
            DefaultMutableTreeNode codeNode = new DefaultMutableTreeNode(codeNodeLabel);
            node.add(codeNode);
            TreePath nodePath = new TreePath(node.getPath());
            TreePath codeNodePath = new TreePath(codeNode.getPath());
            ih.getPosition();
//            if (ih.getInstruction() instanceof CPInstruction)
//            {
//                codeNode = new DefaultMutableTreeNode(((CPInstruction)ih.getInstruction()).toString(cpgen.getConstantPool()));
//            }
            if (ih.getInstruction() instanceof InvokeInstruction)
            {
                // If this is an invoke, set things up so it can be expanded later
                InvokeData invokeData = InstructionInfo.getInvokeData(cgen, ih);
                nodeMethodSigMap.put(codeNodePath, invokeData.cgen.getClassName()+"."+invokeData.methodName+invokeData.signature);
                codeNode.add(new DefaultMutableTreeNode("<html><font color=\"blue\">empty</font></html>"));
            }
            // Set up the appropriate hash data and update the hashmap
            ArrayList<Integer> nodeHashes = new ArrayList<Integer>();
            nodeHashes.add(InstructionInfo.getInstrHash(cgen, mgen, ih));
            if (nodeHashMap.get(nodePath) != null)
                nodeHashes.addAll(nodeHashMap.get(nodePath));
            nodeHashMap.put(codeNodePath, nodeHashes);
        }
    }

    private void loadParserData()
    {
        try
        {
            parserDataMap.clear();
            java.io.FileReader fileReader = new java.io.FileReader(parserDataFile);
            StringBuffer data = new StringBuffer();
            int nextChar = fileReader.read();
            // First read in the recursive methods
            while (nextChar != '%' && nextChar != -1)
            {
                if (nextChar=='\n')
                {
                    if (!data.toString().trim().isEmpty())
                        recursiveMethodList.add(data.toString().trim());
                    data = new StringBuffer();
                }
                else
                {
                    data.append((char)nextChar);
                }
                nextChar = fileReader.read();
            }
            // Second, read in the sync methods
            nextChar = fileReader.read();
            data = new StringBuffer();
            while (nextChar != '%' && nextChar != -1)
            {
                if (nextChar=='\n')
                {
                    if (!data.toString().trim().isEmpty())
                        syncMethodList.add(data.toString().trim());
                    data = new StringBuffer();
                }
                else
                {
                    data.append((char)nextChar);
                }
                nextChar = fileReader.read();
            }
            // Lastly, read in the var map
            nextChar = fileReader.read();
            data = new StringBuffer();
            while (nextChar != -1)
            {
                if (nextChar=='%')
                {
                    // Break up the data into a mapping
                    String arrayString = data.substring(0, data.indexOf("\n"));
                    arrayString = arrayString.substring(1,arrayString.length()-1);
                    String[] stringArray = arrayString.split(",");
                    ArrayList<Integer> intArray = new ArrayList<Integer>();
                    for (String intString : stringArray)
                        intArray.add(new Integer(intString));
                    parserDataMap.put(intArray, data.substring(data.indexOf("\n")+1));
                    data = new StringBuffer();
                }
                else
                {
                    data.append((char)nextChar);
                }
                nextChar = fileReader.read();
            }
            fileReader.close();
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void loadBytecode()
    {
        try
        {
            jarProcessor = new JarProcessor(jarFile.getPath());

            // Build the basic tree
            DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(jarFile.getPath());
            DefaultMutableTreeNode staticNode = new DefaultMutableTreeNode("Static Constructors");
            DefaultMutableTreeNode mainNode = new DefaultMutableTreeNode("Main");
            DefaultMutableTreeNode recursiveNode = new DefaultMutableTreeNode("Recursive Methods");
            DefaultMutableTreeNode syncNode = new DefaultMutableTreeNode("Special Methods (Callbacks, etc.)");
            rootNode.add(staticNode);
            rootNode.add(mainNode);
            rootNode.add(recursiveNode);
            rootNode.add(syncNode);

            // Static constructors
            Iterator<ClassGen> cgenIter = jarProcessor.staticMethodMap.keySet().iterator();
            while (cgenIter.hasNext())
            {
                ClassGen staticCgen = cgenIter.next();
                MethodGen staticMgen = jarProcessor.staticMethodMap.get(staticCgen);
                DefaultMutableTreeNode staticConstructorNode = new DefaultMutableTreeNode(staticCgen.getClassName()+"." +staticMgen.getName()+staticMgen.getSignature());
                staticConstructorNode.add(new DefaultMutableTreeNode("<html><font color=\"blue\">empty</font></html>"));
                staticNode.add(staticConstructorNode);
                nodeMethodSigMap.put(new TreePath(staticConstructorNode.getPath()),staticConstructorNode.toString());
            }

            // Main
            DefaultMutableTreeNode mainMethodNode = new DefaultMutableTreeNode(
                    jarProcessor.entryClass.getClassName()+"."+jarProcessor.entryMethod.getName()+jarProcessor.entryMethod.getSignature());
            mainMethodNode.add(new DefaultMutableTreeNode("<html><font color=\"blue\">empty</font></html>"));
            mainNode.add(mainMethodNode);
            nodeMethodSigMap.put(new TreePath(mainMethodNode.getPath()),mainMethodNode.toString());

            // Recursive methods
            for (String string : recursiveMethodList)
            {
                DefaultMutableTreeNode recursiveMethodNode = new DefaultMutableTreeNode(string);
                recursiveMethodNode.add(new DefaultMutableTreeNode("<html><font color=\"blue\">empty</font></html>"));
                recursiveNode.add(recursiveMethodNode);
                nodeMethodSigMap.put(new TreePath(recursiveMethodNode.getPath()),recursiveMethodNode.toString());
            }

            // Sync methods
            for (String string : syncMethodList)
            {
                DefaultMutableTreeNode syncMethodNode = new DefaultMutableTreeNode(string);
                syncMethodNode.add(new DefaultMutableTreeNode("<html><font color=\"blue\">empty</font></html>"));
                syncNode.add(syncMethodNode);
                nodeMethodSigMap.put(new TreePath(syncMethodNode.getPath()),syncMethodNode.toString());
            }

            System.out.println(nodeMethodSigMap);

            // Finalize the tree
            bytecodeTree.setModel(
                    new DefaultTreeModel(rootNode));
            bytecodeTree.repaint();
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(final String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String jarFilename = "";
                String parserOutFilename = "";
                if (args.length > 0)
                {
                    jarFilename = args[0];
                    if (args.length > 1)
                        parserOutFilename = args[1];
                }
                new BytecodeViewer(jarFilename,parserOutFilename).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JTree bytecodeTree;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openJarMenuItem;
    private javax.swing.JMenuItem openVerifierOutputMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTextArea universeTextArea;
    // End of variables declaration//GEN-END:variables

}
